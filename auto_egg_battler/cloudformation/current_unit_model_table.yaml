Resources:
  CurrentUnitModelTable:
    Type: AWS::DynamoDB::Table
    Properties:
      "AttributeDefinitions":
        - "AttributeName": "unitId"
          "AttributeType": "S"
        - "AttributeName": "name"
          "AttributeType": "S"
      "KeySchema":
        - "AttributeName": "unitId"
          "KeyType": "HASH"
        - "AttributeName": "name"
          "KeyType": "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "CurrentUnitModel"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
    InitFunction:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile: >
            const AWS = require("aws-sdk");
            const response = require('./cfn-response');
            const docClient = new AWS.DynamoDB.DocumentClient();
            exports.handler = function(event, context) {
              console.log(JSON.stringify(event,null,2));
              var params = {
                RequestItems: {
                  "CurrentUnitModel": [
                    {
                      PutRequest: {
                        Item: {
                          unitId: "1234",
                          name: "Knight",
                          boardLocation: "A1"
                          maxHealth: 50,
                          maxDefense: 10,
                          maxAttackDamage 20,
                          itemIds: "I10"
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          unitId: "1234",
                          name: "Warrior",
                          boardLocation: "A1"
                          maxHealth: 50,
                          maxDefense: 10,
                          maxAttackDamage 20,
                          itemIds: "I10"
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          unitId: "1234",
                          name: "Bruiser",
                          boardLocation: "A1"
                          maxHealth: 50,
                          maxDefense: 10,
                          maxAttackDamage 20,
                          itemIds: "I10"
                        }
                      }
                    }                  
                  ]
                }
              };
              docClient.batchWrite(params, function(err, data) {
                if (err) {
                  response.send(event, context, "FAILED", {});
                } else {
                  response.send(event, context, "SUCCESS", {});
                }
              });
            };
        Handler: index.handler
        Role:
          Fn::GetAtt: [ LambdaRole , "Arn" ]
        # 2020-02-27: [bp] updated from nodejs10.x in case it matters
        Runtime: nodejs12.x
        Timeout: 60
    InitializeEventsTable:
      Type: Custom::InitFunction
      DependsOn: CurrentUnitModelTable
      Properties:
        ServiceToken:
          Fn::GetAtt: [ InitFunction , "Arn" ]
        DynamoTableName:
          Ref: CurrentUnitModelTable